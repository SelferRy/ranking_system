// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: api/banner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BannerRotator_AddBanner_FullMethodName    = "/api.BannerRotator/AddBanner"
	BannerRotator_DeleteBanner_FullMethodName = "/api.BannerRotator/DeleteBanner"
	BannerRotator_Click_FullMethodName        = "/api.BannerRotator/Click"
	BannerRotator_Banner_FullMethodName       = "/api.BannerRotator/Banner"
)

// BannerRotatorClient is the client API for BannerRotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerRotatorClient interface {
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Banner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error)
}

type bannerRotatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerRotatorClient(cc grpc.ClientConnInterface) BannerRotatorClient {
	return &bannerRotatorClient{cc}
}

func (c *bannerRotatorClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*AddBannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBannerResponse)
	err := c.cc.Invoke(ctx, BannerRotator_AddBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotatorClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BannerRotator_DeleteBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotatorClient) Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BannerRotator_Click_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotatorClient) Banner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BannerResponse)
	err := c.cc.Invoke(ctx, BannerRotator_Banner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerRotatorServer is the server API for BannerRotator service.
// All implementations must embed UnimplementedBannerRotatorServer
// for forward compatibility.
type BannerRotatorServer interface {
	AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error)
	Click(context.Context, *ClickRequest) (*emptypb.Empty, error)
	Banner(context.Context, *BannerRequest) (*BannerResponse, error)
	mustEmbedUnimplementedBannerRotatorServer()
}

// UnimplementedBannerRotatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBannerRotatorServer struct{}

func (UnimplementedBannerRotatorServer) AddBanner(context.Context, *AddBannerRequest) (*AddBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedBannerRotatorServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedBannerRotatorServer) Click(context.Context, *ClickRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Click not implemented")
}
func (UnimplementedBannerRotatorServer) Banner(context.Context, *BannerRequest) (*BannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Banner not implemented")
}
func (UnimplementedBannerRotatorServer) mustEmbedUnimplementedBannerRotatorServer() {}
func (UnimplementedBannerRotatorServer) testEmbeddedByValue()                       {}

// UnsafeBannerRotatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerRotatorServer will
// result in compilation errors.
type UnsafeBannerRotatorServer interface {
	mustEmbedUnimplementedBannerRotatorServer()
}

func RegisterBannerRotatorServer(s grpc.ServiceRegistrar, srv BannerRotatorServer) {
	// If the following call pancis, it indicates UnimplementedBannerRotatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BannerRotator_ServiceDesc, srv)
}

func _BannerRotator_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotator_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotator_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotator_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotator_Click_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServer).Click(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotator_Click_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServer).Click(ctx, req.(*ClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotator_Banner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotatorServer).Banner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotator_Banner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotatorServer).Banner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerRotator_ServiceDesc is the grpc.ServiceDesc for BannerRotator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerRotator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BannerRotator",
	HandlerType: (*BannerRotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _BannerRotator_AddBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _BannerRotator_DeleteBanner_Handler,
		},
		{
			MethodName: "Click",
			Handler:    _BannerRotator_Click_Handler,
		},
		{
			MethodName: "Banner",
			Handler:    _BannerRotator_Banner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/banner.proto",
}
