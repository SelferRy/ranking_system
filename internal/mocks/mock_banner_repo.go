// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/repository/banner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/SelferRy/ranking_system/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBannerRepository is a mock of BannerRepository interface.
type MockBannerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBannerRepositoryMockRecorder
}

// MockBannerRepositoryMockRecorder is the mock recorder for MockBannerRepository.
type MockBannerRepositoryMockRecorder struct {
	mock *MockBannerRepository
}

// NewMockBannerRepository creates a new mock instance.
func NewMockBannerRepository(ctrl *gomock.Controller) *MockBannerRepository {
	mock := &MockBannerRepository{ctrl: ctrl}
	mock.recorder = &MockBannerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannerRepository) EXPECT() *MockBannerRepositoryMockRecorder {
	return m.recorder
}

// AddToSlot mocks base method.
func (m *MockBannerRepository) AddToSlot(ctx context.Context, slotID entity.SlotID, bannerID entity.BannerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToSlot", ctx, slotID, bannerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToSlot indicates an expected call of AddToSlot.
func (mr *MockBannerRepositoryMockRecorder) AddToSlot(ctx, slotID, bannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToSlot", reflect.TypeOf((*MockBannerRepository)(nil).AddToSlot), ctx, slotID, bannerID)
}

// ExistsInSlot mocks base method.
func (m *MockBannerRepository) ExistsInSlot(ctx context.Context, slotID entity.SlotID, bannerID entity.BannerID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsInSlot", ctx, slotID, bannerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsInSlot indicates an expected call of ExistsInSlot.
func (mr *MockBannerRepositoryMockRecorder) ExistsInSlot(ctx, slotID, bannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsInSlot", reflect.TypeOf((*MockBannerRepository)(nil).ExistsInSlot), ctx, slotID, bannerID)
}

// GetForSlot mocks base method.
func (m *MockBannerRepository) GetForSlot(ctx context.Context, slotID entity.SlotID) ([]entity.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForSlot", ctx, slotID)
	ret0, _ := ret[0].([]entity.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForSlot indicates an expected call of GetForSlot.
func (mr *MockBannerRepositoryMockRecorder) GetForSlot(ctx, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForSlot", reflect.TypeOf((*MockBannerRepository)(nil).GetForSlot), ctx, slotID)
}

// RemoveFromSlot mocks base method.
func (m *MockBannerRepository) RemoveFromSlot(ctx context.Context, slotID entity.SlotID, bannerID entity.BannerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromSlot", ctx, slotID, bannerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromSlot indicates an expected call of RemoveFromSlot.
func (mr *MockBannerRepositoryMockRecorder) RemoveFromSlot(ctx, slotID, bannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromSlot", reflect.TypeOf((*MockBannerRepository)(nil).RemoveFromSlot), ctx, slotID, bannerID)
}
