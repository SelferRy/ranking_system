// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/bandit/ucb1.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/SelferRy/ranking_system/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBannerSelector is a mock of BannerSelector interface.
type MockBannerSelector struct {
	ctrl     *gomock.Controller
	recorder *MockBannerSelectorMockRecorder
}

// MockBannerSelectorMockRecorder is the mock recorder for MockBannerSelector.
type MockBannerSelectorMockRecorder struct {
	mock *MockBannerSelector
}

// NewMockBannerSelector creates a new mock instance.
func NewMockBannerSelector(ctrl *gomock.Controller) *MockBannerSelector {
	mock := &MockBannerSelector{ctrl: ctrl}
	mock.recorder = &MockBannerSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannerSelector) EXPECT() *MockBannerSelectorMockRecorder {
	return m.recorder
}

// SelectBanner mocks base method.
func (m *MockBannerSelector) SelectBanner(stats []entity.BannerStat) (entity.BannerID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBanner", stats)
	ret0, _ := ret[0].(entity.BannerID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectBanner indicates an expected call of SelectBanner.
func (mr *MockBannerSelectorMockRecorder) SelectBanner(stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBanner", reflect.TypeOf((*MockBannerSelector)(nil).SelectBanner), stats)
}
