// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/repository/management.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/SelferRy/ranking_system/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockManagementRepository is a mock of ManagementRepository interface.
type MockManagementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockManagementRepositoryMockRecorder
}

// MockManagementRepositoryMockRecorder is the mock recorder for MockManagementRepository.
type MockManagementRepositoryMockRecorder struct {
	mock *MockManagementRepository
}

// NewMockManagementRepository creates a new mock instance.
func NewMockManagementRepository(ctrl *gomock.Controller) *MockManagementRepository {
	mock := &MockManagementRepository{ctrl: ctrl}
	mock.recorder = &MockManagementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementRepository) EXPECT() *MockManagementRepositoryMockRecorder {
	return m.recorder
}

// AddBannerToSlot mocks base method.
func (m *MockManagementRepository) AddBannerToSlot(ctx context.Context, bannerID entity.BannerID, slotID entity.SlotID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBannerToSlot", ctx, bannerID, slotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBannerToSlot indicates an expected call of AddBannerToSlot.
func (mr *MockManagementRepositoryMockRecorder) AddBannerToSlot(ctx, bannerID, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannerToSlot", reflect.TypeOf((*MockManagementRepository)(nil).AddBannerToSlot), ctx, bannerID, slotID)
}

// BannerExistsInSlot mocks base method.
func (m *MockManagementRepository) BannerExistsInSlot(ctx context.Context, bannerID entity.BannerID, slotID entity.SlotID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BannerExistsInSlot", ctx, bannerID, slotID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BannerExistsInSlot indicates an expected call of BannerExistsInSlot.
func (mr *MockManagementRepositoryMockRecorder) BannerExistsInSlot(ctx, bannerID, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BannerExistsInSlot", reflect.TypeOf((*MockManagementRepository)(nil).BannerExistsInSlot), ctx, bannerID, slotID)
}

// RemoveBannerFromSlot mocks base method.
func (m *MockManagementRepository) RemoveBannerFromSlot(ctx context.Context, bannerID entity.BannerID, slotID entity.SlotID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBannerFromSlot", ctx, bannerID, slotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBannerFromSlot indicates an expected call of RemoveBannerFromSlot.
func (mr *MockManagementRepositoryMockRecorder) RemoveBannerFromSlot(ctx, bannerID, slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBannerFromSlot", reflect.TypeOf((*MockManagementRepository)(nil).RemoveBannerFromSlot), ctx, bannerID, slotID)
}
