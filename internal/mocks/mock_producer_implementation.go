// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/adapters/broker/kafka/producer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockBrokerWriter is a mock of brokerWriter interface.
type MockBrokerWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerWriterMockRecorder
}

// MockBrokerWriterMockRecorder is the mock recorder for MockBrokerWriter.
type MockBrokerWriterMockRecorder struct {
	mock *MockBrokerWriter
}

// NewMockBrokerWriter creates a new mock instance.
func NewMockBrokerWriter(ctrl *gomock.Controller) *MockBrokerWriter {
	mock := &MockBrokerWriter{ctrl: ctrl}
	mock.recorder = &MockBrokerWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerWriter) EXPECT() *MockBrokerWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBrokerWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBrokerWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBrokerWriter)(nil).Close))
}

// WriteMessages mocks base method.
func (m *MockBrokerWriter) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockBrokerWriterMockRecorder) WriteMessages(ctx interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockBrokerWriter)(nil).WriteMessages), varargs...)
}
