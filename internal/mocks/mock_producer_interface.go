// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/broker/event_producer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/SelferRy/ranking_system/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockEventProducer is a mock of EventProducer interface.
type MockEventProducer struct {
	ctrl     *gomock.Controller
	recorder *MockEventProducerMockRecorder
}

// MockEventProducerMockRecorder is the mock recorder for MockEventProducer.
type MockEventProducerMockRecorder struct {
	mock *MockEventProducer
}

// NewMockEventProducer creates a new mock instance.
func NewMockEventProducer(ctrl *gomock.Controller) *MockEventProducer {
	mock := &MockEventProducer{ctrl: ctrl}
	mock.recorder = &MockEventProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventProducer) EXPECT() *MockEventProducerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEventProducer) Send(ctx context.Context, event entity.DomainEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEventProducerMockRecorder) Send(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEventProducer)(nil).Send), ctx, event)
}
